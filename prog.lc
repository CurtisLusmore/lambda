id = \x . x
const x _ = x

A = \a . a
B = \b . b

true = \x y . x
false = \x y . y
if c t f = c t f

pair h t = \p . p false h t
null = \p . p true id id
null? p = p (\n h t . n)
head p = p (\n h t . h)
tail p = p (\n h t . t)

zero = \f . id
zero? n = n (const false) true
succ n = \f . \x . f (n f x)

map f xs = if (null? xs) null (pair (f (head xs)) (map f (tail xs)))
filter p xs = if (null? xs) null (if (p (head xs)) (pair (head xs) (filter p (tail xs))) (filter p (tail xs)))
foldl f x xs = if (null? xs) x (foldl f (f x (head xs)) (tail xs))